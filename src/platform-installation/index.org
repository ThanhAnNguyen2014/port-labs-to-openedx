#+TITLE: Setup Open edX platform and Configure it
#+Author: Siva Shanker

* Introduction
  This document describes about setting up Open edX platfrom and
  Configuring it. Once we setup Open edX platform, we can port all
  our virtual-labs to the edX platform. 
* Sett up Open edX platform on AWS
** Launch an instance on AWS ( Provision of Open edX setup)
   By default some AMIs on AWS comes with Open edX platform setup.
   Use any of the following instances from AWS for Open edX platform
   setup.
   - From Community AMI ::
     + Chose ami-ad161ee8 with at least 4GB of RAM and 50GB HDD      
   - From AWS Marketplace ::
     + Chose AMI : Open edX powered by Bitnami (HVM).
   - Use the Public IP of the instance to see the web consoles of
     Open edX platform 
     + Port 80 is to see the default edx web console
     + If we want to see the edX studio web console, use 18010 port
       number
       #+BEGIN_EXAMPLE
       http://<public-ip> # courses dashboard
       http://<public_ip>:18010    # Studio
       #+END_EXAMPLE
     + Use satff@example.com as user email-id and edx as password for
       logging into edx studio and to make changes in courses
** Setup Open edX platform using Automation scripts
  - Launch an Ubuntu 12.04 64 bit on AWS Minimum Requirements as
    follows for setting up Open edX platform
  - Instance id :  ami-019b6745
    + Instance Type: t2.medium
    + RAM : 4 GB
    + Hard Disk : 50 GB
  - SSH to launched instance using 
    #+BEGIN_EXAMPLE
    ssh -i "OpenedX.pem" ubuntu@ec2-54-153-2-214.us-west-1.compute.amazonaws.com
    #+END_EXAMPLE
  - Update and upgrade instance
    #+BEGIN_EXAMPLE
    sudo apt-get update -y  
    sudo apt-get upgrade -y
    #+END_EXAMPLE
  - Reboot the instance 
    #+BEGIN_EXAMPLE
    sudo reboot
    #+END_EXAMPLE
  - Automated Installation scripts
    + Install Open edX release
      - export =OPENEDX_RELEASE= variable with suitable version of
        edx-platform. By default, it edx-platform comes with the
        master branch which will be the latest sources. For example,
        if we want to use cypress release to setup edX-platform,
        issue the following command on command line.
	#+BEGIN_EXAMPLE
        export OPENEDX_RELEASE=named-release/cypress
	#+END_EXAMPLE
	if we want to use dogwood release, issue the following
        command on command line
	#+BEGIN_EXAMPLE
        export OPENEDX_RELEASE=named-release/dogwood
	#+END_EXAMPLE
	if we want to use dogwood.1 release, issue the following
        command on command line
	#+BEGIN_EXAMPLE
        export OPENEDX_RELEASE=named-release/dogwood.1
	#+END_EXAMPLE
    + Then run the following two scripts to complete Open edX
      platform setup.
      #+BEGIN_EXAMPLE
      wget https://raw.githubusercontent.com/edx/configuration/master/util/install/ansible-bootstrap.sh -O - | sudo bash     
      wget https://raw.githubusercontent.com/edx/configuration/master/util/install/sandbox.sh -O - | bash     
      #+END_EXAMPLE
  - edX platform is ready 
  - port 80 is to see the default edx web console
    + If we want to see the edX studio web console, use 18010 port
      number
      #+BEGIN_EXAMPLE
      http://<public_ip>:18010    # Studio
      http://<public-ip> # courses dashboard
      #+END_EXAMPLE
  - Use satff@example.com as user email-id and edx as password for
    logging into edx studio and to make changes in courses
  - Reference
    https://openedx.atlassian.net/wiki/display/OpenOPS/Native+Open+edX+Ubuntu+12.04+64+bit+Installation
** Setup Open edX platform using manual steps 
    - Launch a VM ubuntu 12.04 64 bit on AWS with above VM
      configuration details.
    - Update and upgrade VM
      #+BEGIN_EXAMPLE 
      sudo apt-get update -y
      sudo apt-get upgrade -y
      #+END_EXAMPLE
    - Perform the steps bellow 
      #+BEGIN_EXAMPLE 
      sudo apt-get install -y build-essential software-properties-common python-software-properties curl git-core libxml2-dev libxslt1-dev libfreetype6-dev python-pip python-apt python-dev libxmlsec1-dev swig libmysqlclient-dev
      sudo pip install --upgrade pip
      #+END_EXAMPLE
    - On the new server, clone the configuration repo
      #+BEGIN_EXAMPLE 
      cd /var/tmp
      git clone https://github.com/edx/configuration
      #+END_EXAMPLE
    - Allow password based SSH authentication. For that edit the
      common role inside of
      =configuration/playbooks/roles/common_vars/defaults/main.yml= and
      set *COMMON_SSH_PASSWORD_AUTH to "yes"*
    - Install the ansible requirements 
      #+BEGIN_EXAMPLE 
      cd /var/tmp/configuration
      sudo pip install -r requirements.txt
      sudo pip install setuptools --upgrade
      #+END_EXAMPLE
    - NOTE :: By default, next command (which would run play books to
	      setup platform)uses edx-platform master branch. Latest
	      release is dogwood.2.
	    
	      So, set environment variable for OPENEDX_RELEASE
	      variable for installing required Open edX platform
	      release.
	     
	      For example, 
	      #+BEGIN_EXAMPLE
	      export OPENEDX_RELEASE=named-release/birtch.2
	      or 
	      export OPENEDX_RELEASE=named-release/cypress
	      #+END_EXAMPLE
    - NOTE :: You may be getting the problem with paramiko
	      package. Install it and run the below command.
		#+BEGIN_EXAMPLE
		sudo pip install paramiko==1.10
		#+END_EXAMPLE
      
    - Run the edx_sandbox.yml playbook from configuration/playbooks directory
      #+BEGIN_EXAMPLE 
      cd /var/tmp/configuration/playbooks && sudo ansible-playbook -c local ./edx_sandbox.yml -i "localhost,"
      #+END_EXAMPLE
    - Reference
      https://github.com/edx/configuration/wiki/edX-Ubuntu-12.04-64-bit-Installation. 

* Configuring Open edX platform
** Provide proper verification link to registered users
   - Modify the files 
     #+BEGIN_EXAMPLE 
     vim /edx/app/edxapp/lms.env.json
     vim /edx/app/edxapp/cms.env.json
     #+END_EXAMPLE
     and add the FQDN of LMS machine to =SITE_NAME= variable in both the
     files. 
   - Restart the edx services 
     #+BEGIN_EXAMPLE 
     /edx/bin/supervisorctl restart edxapp:       
     edxapp:cms: stopped
     edxapp:lms: stopped
     edxapp:lms: started
     edxapp:cms: started
     
     /edx/bin/supervisorctl restart edxapp_worker:
     edxapp_worker:cms_low_3: stopped
     edxapp_worker:lms_high_mem_2: stopped
     edxapp_worker:lms_default_3: stopped
     edxapp_worker:cms_high_1: stopped
     edxapp_worker:lms_low_1: stopped
     edxapp_worker:cms_default_4: stopped
     edxapp_worker:lms_high_4: stopped
     edxapp_worker:cms_low_3: started
     edxapp_worker:lms_high_mem_2: started
     edxapp_worker:lms_default_3: started
     edxapp_worker:cms_high_1: started
     edxapp_worker:lms_low_1: started
     edxapp_worker:cms_default_4: started
     edxapp_worker:lms_high_4: started
     #+END_EXAMPLE
     OR
     #+BEGIN_EXAMPLE
     /edx/bin/supervisorctl restart all
     #+END_EXAMPLE
     
** Disable course creation for users on edX-Studio
   In =/edx/app/edxapp/edx-platform/cms/envs/common.py=, or your
   extension of it, set 'ENABLE_CREATOR_GROUP': True to
   MITX_FEATURES. .

   1) Update ENABLE_CREATOR_GROUP in common.py
      #+BEGIN_EXAMPLE 
      cd /edx/app/edxapp/edx-platform/cms/envs 
      sudo nano common.py      
      #+END_EXAMPLE
      Set :
      #+BEGIN_EXAMPLE 
      FEATURES {
      ENABLE_CREATOR_GROUP : True
      }
      #+END_EXAMPLE
   
   2) Update CMS DB structure 
      #+BEGIN_EXAMPLE
      cd /edx/app/edxapp/edx-platform     
      sudo -u www-data /edx/bin/python.edxapp ./manage.py cms syncdb --migrate --settings aws --migrate â€“noinput
      #+END_EXAMPLE
   3) Restart the edX services
      #+BEGIN_EXAMPLE 
      /edx/etc/supervisord.conf restart all:
      #+END_EXAMPLE
   Then registered users will not be able create courses on
   edX-studio. They need to contact admin or super-user to get
   privileges for creating courses. 
** Update Analytics Dashboard URL on LMS machine
   - Open the file =/edx/app/edxapp/lms.env.json= and update following
     variable with Analytics/insights fqdn/public-ip with the proper
     port number on which insights app is running
     #+BEGIN_EXAMPLE
     "ANALYTICS_DASHBOARD_URL": "http://54.153.71.178:18110
     #+END_EXAMPLE
   - Restart the edX services 
     #+BEGIN_EXAMPLE 
     /edx/bin/supervisorctl restart edxapp:       
     /edx/bin/supervisorctl restart edxapp_worker:
     #+END_EXAMPLE
** Configure Mysql server so that it allows remote machines to execute queries
   Allow Analytics machine to connect LMS machine's databases by
   running the following example commands
   - Log in as root user
   #+BEGIN_EXAMPLE
   mysql -uroot -p 
   #+END_EXAMPLE
   - Grant permissions from analytics machine with the following details
     #+BEGIN_EXAMPLE
     mysql> GRANT ALL PRIVILEGES ON edxapp.* TO 'edxapp001'@'<analytics-server-ip>' IDENTIFIED BY 'password';
     #+END_EXAMPLE
   
   LMS database( Mysql) is not open to all remote hosts. It is open to
   only localhost.
   
   In order to make database open for all remote hosts, we need to do
   the following steps.
   - Open =/et/mysql/my.conf=
   - Change =bind-address= from =127.0.0.1= to =0.0.0.0=
   - Restart the mysql server
     #+BEGIN_EXAMPLE
     /etc/init.d/mysql restart
     #+END_EXAMPLE
   - Reference 
     https://easyengine.io/tutorials/mysql/remote-access/     

* Setting up Open edX platform on a VM (Base4)
  - Minimum hardware requirements 
    + RAM : 4GB 
    + HDD : 50GB
    + CPUs: 2 
  - Create a VM using
** Process for creating new VM on base1
   - ssh into base1 machine using below command.
     #+begin_example
     ssh -X root@<base1_ip>
     #+end_example
     *Note :-* Here -X will allow us to open application in GUI mode.
   - Change directory into vms folder
     #+begin_example 
     cd /mnt/das1/vms
     #+end_example
   - Create a folder with VM name
     #+begin_example
     mkdir test_vm
     #+end_example
   - Change PWD to newly created VM folder and use 'qemu-img' command
     to create disk image for VM. For example, to create a 60GB disk
     image use:
     #+begin_example
     qemu-img create -f qcow2 test_vm.qcow2 60G
     #+end_example
   - Run below command to view the virtual machines in GUI mode.
     #+begin_example
     [root@base1 vms]# virt-manager
     #+end_example
   - Click on =create new virtual machine= icon
   - Name your VM name and click on forward button.
   - Choose an ISO image from local disk for base1 use path as
     =/mnt/das1/operating_systems= and select OS name and its version
     number.
   - Choose at least 4GB of RAM and 2 CPUs.
   - Choose radio button (Select managed or other existing storage)
     and browse for hard disk image for VM from location where it was
     created using qemu-img command. In our case it will be in
     =/mnt/das1/vms/test_vm/testvm.qcow2=
   - Check Customize configuration before install Use correct bridge
     for networking. You can use 'ifconfig' command on base machine to
     see which bridge in base machine is in 10.4.12.0/22 range and use
     it while creating new VM. Use =breth1= bridge in base1.
   - Then click on =Disk 1= choose advance options and select storage
     format as =qcow2=. And apply
   - Click on begin installation to start the os installation process.
   - Once OS installation is done please log into the machine using
     user name and password of the machine that you provided.
   - Configure eth0 interface to do so open file at =vim
     /etc/network/interfaces= and add the below details before that
     find the free available ip address in the range of 10.4.12.0/22
     using =ping <ip>= command
     #+begin_example
     auto eth0
     iface eth0 inet static
     address <ip-address>
     netmask 255.255.252.0
     gateway 10.4.12.236
     #+end_example
   - Add gateway to resolve domain names edit =vim /etc/resolve.conf=
     #+begin_example
     nameserver 10.4.12.160
     #+end_example
   - Restart the network manager to apply new changes
     #+begin_example
     /etc/init.d/networking restart
     #+end_example
   - Now check the internet connection 
     #+begin_example
     ping vlabs.ac.in (or) ping google.com
     #+end_example
   - After creating VM, follow the steps given at [[Using manual steps
     to Setup Open edX platform]] to setup Open edX platform.
   - Reference 
     http://wiki.vlead.vlabs.ac.in/index.php/Creating_new_VM

** Process for creating & restoring snapshots
   [[https://www.sbarjatiya.com/notes_wiki/index.php/Creating_KVM_VM_with_qcow2_disk_format_for_supporting_snapshots][Clickhere]]

* References
  - https://github.com/edx/configuration/wiki
  - https://openedx.atlassian.net/wiki/display/OpenOPS/Native+Open+edX+Ubuntu+12.04+64+bit+Installation
  - http://edx-developer-guide.readthedocs.org/en/latest/public_sandboxes.html
  - https://openedx.atlassian.net/wiki/display/OPEN/Debugging+Issues+with+LMS+and+Studio



      
