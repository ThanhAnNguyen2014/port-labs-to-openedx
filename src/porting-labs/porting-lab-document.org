#+Title: Porting of a lab to Open edX platform
#+Author: VLEAD
#+Email: engg@vlabs.ac.in
#+DATE: [2016-08-29 Thurs]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ./org-templates/level-0.org
#+LANGUAGE: en
#+OPTIONS: ^:nil

* Introduction
  The porting of Virtual Labs in Open edX platform described in this
  document demonstrates creation of a skeletal structure for a lab in
  the format expected by Open edX platform from a specification. The
  porting of a lab would include importing and addition of content to
  the skeletal structure and publishing the configuration changes to
  make it available to users.
* Motivation
  This document is driven by the commitment of delivering Virtual Labs
  on Open edX platform which can be accomplished by following an
  efficient porting process. This document ensures that all the
  Virtual labs start running on Open edX platform for the end users
  after a point of time. The entire workflow starting from the
  creation of a new lab to porting an existing lab is detailed in the
  following sections.
* Steps to port a new lab to Open edX
  This section defines porting of a new lab in Open edX. It also
  describes the difference between porting an existing lab and a new
  lab. Steps for porting a new lab are elaborated below -
  + Firstly, a directory must be created in the local machine with the
    lab name (all letters in lower-case with hyphens) which is wished
    to be ported on Open edX.
  + A file named labspec.json inside the lab directory must be
    created.
** Creation of labspec.json file
   The below steps should be followed for creating the structure of
   the lab in the labspec.json file :
   + The example [[https://github.com/openedx-vlead/port-labs-to-openedx/blob/develop/src/porting-labs/labspec.json][labspec.json]] file could be used for creating the Open
     edX structure of the lab.
   + The example file could be replicated as per the desired lab
     structure.
   + Inside the "course" field, replace the values of "org", "id",
     "display_name" and "overview" with =Organization Name=, =Lab Id=,
     =Name of the lab= and =Description of the lab= respectively. Lab
     Ids could be obtained from [[https://docs.google.com/spreadsheets/d/1qIU42qaMVtwpP_6eV3YXjJs8CJb6wnPPclFgqbGdlCM/edit?usp=sharing][here]]. Lab Ids should be given in
     capital letters for uniformity and avoid including white spaces
     or special characters.
   + Inside the "experiments" field, the list of all the experiments
     for the particular lab should be entered.
   + If the lab also includes fields like =Target Audience=, =Courses
     Aligned=, =Feedback= etc, they have to be created as separate
     sections in labspec.json file.
   + Inside the "experiments" field, leave the first two fields called
     =name= and =subsections= unchanged as =Introduction=.
   + The rest of the =name= and =subsections= fields should be filled
     with the names of the subsections of the the various experiments
     of the lab.
   + Care needs to be taken while creating the labspec.json file. For
     verifying the correctness of the json file, verification using
     the [[http://jsonparseronline.com][json parser]] is strongly recommended.
*** Use of automation script
    + Once the labspec.json file is ready, automation.py script has to
      be run to convert the lab into the Open edX course structure.
    + [[https://github.com/vlead/port-labs-to-openedx][port labs to Open Edx]] repo should be cloned in the local machine
      by running the command =git clone <HTTPS URL of the Git
      repository=.
    + The directory must be changed to port-labs-to-openedx by running
      =cd port-labs-to-openedx/=. The git branch should be switched to
      develop by doing =git checkout develop=.
    + Firstly run =git pull= and then run =make clean= and lastly run
      =make= . If this is the second or third attempt, =make= could be
      run directly instead of running =make clean= first everytime.
    + If no build errors are faced and =make= runs successfully,
      change directory to /build/code/src using the =cd=
      command. There would be an *automation.py* file inside the
      /build/code/src.
    + Run the command =python automation.py <Lab-Directory-Path>=
      (Give the absolute path of the locally created lab directory
      which could be seen using =pwd= command).
    + Compress the lab directory into a tar.gz file using command :
      =tar -cvzf name-of-archive.tar.gz /path/to/directory-or-file=
      Before compressing the directory, change the directory path
      using =cd ..= command.
** Creation of a new lab
   + [[http://open-edx.vlabs.ac.in:18010/][Open edX Studio]] have to be signed in to create the lab which is
     analogous to a course in edX terminologies. First time users
     would have to register to create a lab. In order to view the
     created lab, [[http://open-edx.vlabs.ac.in][Open edX LMS]] (Learning Management System) should be
     visited.
   + Click on =New Course= button on top right corner to start
     creating the new lab.
   + Fill the Course Name, Organisation, Course Number and Course Run
     as per the labspec.json and click on =Create Course=.
   + The content of the lab (HTML/text/images/simulations) would be
     placed in the units. For a better insight, referring the link :
     [[https://www.edx.org/course/creating-course-edx-studio-edx-studiox][Creating a course with Open edX Studio]] is strongly
     recommended. Following the above link is highly recommended as it
     would enhance the understanding of Open edX terminologies and
     their usage.
   + Difference between published and released content, different
     views with staff and student views in LMS could be learnt in
     greater details from : [[https://www.edx.org/course/creating-course-edx-studio-edx-studiox][Creating a course with Open edX Studio]]\\
   The following sections describe the methods to include the
   different components of a lab in Open edX platform.
*** Steps to include the text content
    + Click on =+ New Section= to create a new section for an
      experiment in the lab and hit Enter to save it.
    + Click on =+ New Subsection= to create new subsections named
      *Aim* , *Theory* , *Simulation* , *Video* etc based on the
      labspec details and hit Enter to save it.
**** Example Subsection creation 
     + For *Aim* subsection, click on =+ New Unit= to create a unit
       named *Aim*.
     + Click on =HTML= from Add New Component and select =Text= field.
     + Click on =EDIT= tab at top right corner of editor, write/paste
       the required content and click on =Save=.
     + Go back to *Aim* subsection on Studio Home to create more units
       if required.
     + Create another subsection named *Theory*, follow the same
       process as that of *Aim* and write the required content.
*** Steps to include the simulations
    + Click on =+ New Unit= to create a unit named *Simulation*. If
      the simulation is termed as experiment or coined as some other
      term, that needs to be used here. It is not a mandate to use
      simulation term only.
    + Click on =HTML= from Add New Component and select =IFrame Tool=
      field.
    + Click on =EDIT= tab and select =HTML=, the last icon on the
      editor.
    + Include the iframe code for the simulations which might be
      served from other servers (not from Open EdX platform). In case
      the simulations are not hosted anywhere, the entire code could
      be included for rendering the simulations. Click on =Save= to
      save the changes.
    + If there are multiple simulators for a single experiment, those
      would be created in different units within the same subsection.
    + The below code should be included in the HTML source code
      editor. The =src= field would include the https simulation URL
      if it is already hosted on a server. There would be a full
      screen button also included to open the simulator in a new full
      screen/window on the browser.
    + To ensure link integrity, the =https= URL must be included in
      the iframes of simulations. In case for any lab SSL certificates
      are not available, =http= URL should be included.
#+BEGIN_EXAMPLE
    <p><button onclick="popup()">Full Screen</button></p>
<p></p>
<p><iframe src="https://...." height="602" width="802"> </iframe></p>
<script>// <![CDATA[
function popup(){
  window.open('https://....', '_blank', 'toolbar=0,location=0,menubar=0');
 }
// ]]></script>
#+END_EXAMPLE
*** Steps to include the analytics
     + Analytics code should be included in each simulation code in
       order to capture the usage for each experiment performed by a
       student. The analytics code is given below :

   #+BEGIN_SRC command
   <p><button onclick="popup()">Full Screen</button></p>
   <p><iframe src="http://pevii-au.virtual-labs.ac.in/index.php?exp_id=Optimal_Foraging_Pollinators" 
   height="602" width="802"> </iframe></p>
   <script>// <![CDATA[
   function popup(){
   window.open('http://pevii-au.virtual-labs.ac.in/index.php?exp_id=Optimal_Foraging_Pollinators',
   '_blank', 'toolbar=0,location=0,menubar=0');
    }
   //  ]]></script>

   <script type="text/javascript">
    // ****** ALSO MODIFY THE URLS GIVEN ABOVE **************
   // ********MODIFY THIS SECTION **************************

   var courseid = "pevii-au";
   var experiment_name = "Optimal Pollinators"
   var lab_name = "Population Ecology II"
    
   // *******DO NOT MODIFY THIS SECTION AGAIN **************
   </script>
   <script src="https://github.com/openedx-vlead/lab-usage-tracker/blob/master/src/common.js"></script>
   #+END_SRC
  *NOTE* : 
  + In the above code snippet, the =src= field would include the https
    simulation URL if it is already hosted on a server. There would be
    a full screen button also included to open the simulator in a new
    full screen/window on the browser. The =https= URL given above in
    the example code snippet is only for representational
    purposes. *Kindly refrain from giving the same https URLs as given
    in above example*.
  + The =var= fields should be filled with appropriate courseid,
    experiment_name and lab_name with labid, experiment_name and
    lab_name of the authored lab respectively.
  + To ensure link integrity, the =https= URL must be included in the
    iframes of simulations. In case of unavailability of lab SSL
    certificates, =http= URL should be included.
*** Steps to include the feedback
    The feedback would be captured at lab level as well as at every
    experiment level by the feedback service.
**** Lab level feedback
     Feedback code should be included in each simulation code in
     order to capture the usage for each experiment performed by a
     student. The lab level feedback code snippet is given below :
#+BEGIN_SRC command
<p>
<script src="http://open-edx.vlabs.ac.in:5959/feedback_utils.js"></script>
<script>// <![CDATA[
var user_id = "%%USER_ID%%"
var lab_id = "PEVII-AU"
var lab_name = "Population Ecology II"
// ]]></script>
</p>
<p><a onclick="submit_feedback(lab_id, lab_name, user_id)" style="cursor: pointer;">
Click here </a> to give feedback</p>
#+END_SRC
   + In the above code snippet, the =lab_id= field would include the
     lab IDs which could be obtained from the lab-specifications
     repository for this lab. The values of =lab_id= and =lab_name=
     given above in the example code snippet is only for
     representational purposes. *Kindly refrain from giving the same
     values as given in above example*.
   + The =var= fields should be filled with appropriate lab_id and
     lab_name of the authored lab.
   + *NOTE* : The =user_id= field given as =%%USER_ID%%= should be
     left as it is without any modifications.
   + To ensure link integrity, the =https= URL must be included in the
     iframes of simulations. In case of unavailability of lab SSL
     certificates, =http= URL should be included.
**** Experiment level feedback
     Feedback code should be included in each experiment section as a
     separate subsection in order to capture the feedback for each
     experiment performed by a student. The feedback code is given
     below :
#+BEGIN_SRC command
<p>
<script src="http://open-edx.vlabs.ac.in:5959/feedback_utils.js"></script>
<script>// <![CDATA[
var user_id = "%%USER_ID%%"
var lab_id = "PEVII-AU"
var lab_name = "Population Ecology II"
var exp_id = "E99946"
var exp_name = "Optimal Pollinators"
// ]]></script>
</p>
<p><a onclick="submit_feedback(lab_id, lab_name, exp_id, exp_name, user_id)" style="cursor: pointer;">
Click here </a> to give feedback</p>
#+END_SRC
   + In the above code snippet, the =lab_id= field would include the
     lab IDs which could be obtained from the lab-specifications
     repository for this lab. The values of =lab_id=, =lab_name=,
     =exp_id= and =exp_name= given above in the example code snippet
     is only for representational purposes. *Kindly refrain from
     giving the same values as given in above example*.
   + The =var= fields should be filled with appropriate lab_id,
     lab_name, exp_id and exp_name of the authored lab.
   + *NOTE* : The =user_id= field given as =%%USER_ID%%= should be
     left as it is without any modifications.
   + To ensure link integrity, the =https= URL must be included in the
     iframes of simulations. In case of unavailability of lab SSL
     certificates, =http= URL should be included.
*** Steps to include the videos
    + Click on =+ New Unit= to create a unit named *Video*
    + Choose the =Video= component from Add New Component.
    + Click on =EDIT= tab and include the URL of the video to be added
      in =Default Video URL= field.
    + If the video includes timed scripts, then it should also be
      included in the =Default Timed Transcript= field
    + Click on =Save= to save the changes.
*** Steps to include the images
    Direct copy pasting the images works sometimes and sometimes
    doesn't. Other method to inlcude the images is given below : 
    + Images can be uploaded from =Content= tab, selecting the =Files
      and Uploads= option.
    + Upload the image using =+ Upload New File= and provide the
      =Studio URL= given to render the image.
*** Steps to include the quiz
    + Select the =Problem= component from Add New Component after
      creating a new unit named =Quiz=.
    + Depending on the type of quiz, select the option for creating
      different quizzes.
*** Steps to publish the lab content
    Click on the upward arrow icon in each section for [[http://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/developing_course/course_units.html#publish-a-unit][publishing]] all
    the contents of a section. Without publishing the content, it
    would not be visible on the Open edX Learning Management System
    (LMS).
*** Steps for miscellaneous modifications
   Few more steps to make other modifications by the author are listed
   below :
**** Modification of lab date to =Anytime=
     + Click on Course name which you own.
     + Go to settings drop down, and click Advanced settings.
     + Change field “Course Advertised Start Date” from null to
       “Anytime”
     + Save your changes
**** Modification of the default lab preview and lab image
     + Click on Course name.
     + Go to =schedule and details= in settings drop down.
     + Leave all the fields in course schedule empty except for the
       first field which should be any date previous to current date.
     + In “Introducing your Course” section edit the “Course Overview”
       as per the requirement.
     + Add a course image by clicking on Upload image button.
     + Save the changes.
** Porting the lab with database
   Currently we are not supporting any lab porting where the lab has
   an existing database.
** Exporting the lab
   Following steps could be followed to [[http://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/releasing_course/export_import_course.html][export]] the lab : 
   + Click on =Tools= dropdown menu option from top. Click on =export=
     option.
   + Choose the =Export Course Content= option and save the tar.gz
     file of the created lab in the local machine which could be
     pushed as sources to GitHub.
   + The author/creator would attach the tar.gz file of the course
     with all the contents in the same issue where the course creation
     was request (Engineers-Forum).
*** Lab content after exporting
**** What comes with an exported lab :     
     When a course is exported, edX CMS/studio creates a tar.gz file
     that includes the following course data.
     + Course content (all Sections, Subsections, and Units)
     + Course structure
     + Individual problems
     + Pages
     + Course assets
     + Course settings
**** What doesn't come with an exported lab :
     The following data is not exported with the course.
     + User data
       + Course team data
     + Discussion data
     + Certificates   
*** Creation of a repository on GitHub 
    + Export the lab from =Tools= dropdown menu on the top of the
      Studio. A zipped file is downloaded. Unzip and untar the
      exported file to produce a directory.
      + Command =tar zxvf testlab.tar.gz= forms a tar.gz file.      
    + Create a repository in the github in =openedx-vlead=
      organisation with the same name as that of the lab preceeded by
      term =open-edx=
    + Clone the newly created repository.
    + Copy the entire contents of the directory created in step 1 to
      the directory created in step 3.
    + Add, commit and push all the changes to the git repository.
** Steps to port an existing lab to Open EdX
   We need not create a new course, instead the already created
   courses would be imported from GitHub.
** Troubleshooting Scenarios
*** Error while running automation script
    + The most probable reason for errors faced during running of
      automation script is error in the labspec.json file. Please
      cross-check the file using [[http://json.parser.online.fr/][json parser]].
    + If the automation script throws error or doesnt create the
      sections automatically, please go ahead and create the sections
      manually. For few labs the script is found to be erroneous and
      not behaving as per expectations.
*** Methods to include an image
    + Direct copy pasting the image works sometimes and sometimes
      doesnt. In that case, images can be uploaded from =Content= tab
      above and =Files and Uploads= option. Upload the image and
      provide the URL given to render the image.
** Porting of a lab with database
   Right now we are not porting any lab which comes with database.
** Resolving the link integrity issue
   To ensure link integrity, always include the =https= URL in the
   iframes of simulations.
** Theming
   The porting process does not include any specifics for including
   any theme. By default the themes would be applied.
* Disclaimer
  Responsibility for the creation of lab specifications would lie
  solely on the person porting the lab. All the information in the lab
  specifications would be religiously followed for further
  modifications, hence greater care needs to be taken while creation
  of them. The content of a lab should not be changed in any case and
  to be ported as it is. Any discrepencies found in the initial
  creation of lab fields would be corrected referring to the lab
  specification files only. All the lab sources must be pushed into
  GitHub as per the above described steps and porting would not be
  considered successful unless this step is performed correctly.
* Summary
  This document highlights the porting of a new lab as well as an
  existing lab in detail. It focusses on the process to contribute
  towards Open edX courses and deliver high quality labs. It also aims
  at collaborating contributions of the developers across the open
  source platform - Open edX. This streamlined process would help in
  our strive for excellence in delivering high standard labs.
* Glossary
  - *Git* : Git is a free and open source distributed version control
    system designed to handle everything from small to very large
    projects with speed and efficiency.
  - *GitHub* : /[[https://github.com/][GitHub]]/ is a web-based Git repository hosting service,
    which offers all of the distributed revision control and source
    code management (SCM) functionality of Git as well as adding its
    own features.
  - *Repository* : The distributed version control system - git is
    used here. Every time the term repository or repo is used, it
    refers to a git repository. A repository is an on-disk data
    structure which stores metadata for a set of files and/or
    directory structure. The whole set of information in the
    repository may be duplicated on every user's system or may be
    maintained on a single server.
  - *Virtual Labs* : [[http://vlabs.ac.in/index.html#aboutus][Virtual Labs]] is an initiative by MHRD under
    NMEICT. The objective is to make engineering education engaging,
    enjoyable, immersive and online.
  - *Open edX Platform* : [[https://open.edx.org/about-open-edx][Open edX]] is the open source platform that
    powers edX courses. EdX offers interactive online courses and
    MOOCs from the world’s best universities and institutions. The
    Open edX Platform of Virtual-Labs hosts all the Virtual-Labs labs
    on the Open edX platform just like edX courses are powered.
  - *Learning Management System (LMS)* : The LMS is the Open edX tool
    that learners use to access course content, including videos,
    textbooks, and problems, and to check their progress in the
    course. The Open edX LMS also offers a discussion forum and a wiki
    that both learners and course team members can contribute to. We
    use the LMS directly through a [[http://open-edx.vlabs.ac.in/][browser]]. No additional software is
    required for this.
 
