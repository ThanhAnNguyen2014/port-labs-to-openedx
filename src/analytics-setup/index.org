#+TITLE: Setup Analytics for Virtual-labs 
#+Author: Siva Shanker
#+Date: [2016-04-26]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+OPTIONS: ^:nil

* Introduction
  Analytics provide the user activity while using virtual labs on Open edX
  platform.  This data allows an insight into the usage of virtual labs that
  could be used for various purposes.  
* Requirements
  - Have a Open edX platform setup ready. Refer [[../platform-installation/index.org]]
  - One more VM for setting up analytics.
* Architecture of Open edX Analytics Gathering

  [[http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/_images/Analytics_Pipeline.png][Architecture Diagram]]

  Capturing of Analytics is three phased.  
  1. LMS, read as Open edX platfrom from which the labs are run, captures the
     events of a user.
  2. Pipeline reads this data from the platform, collates and creates a store
     in a format that could be read by an API.
  3. edx Analytics Data API provides an HTTP interface to access the store
     created by the Pipeline.
  4. Finally insights application will serve the analytics of courses
     which are hosted on LMS.
  The platform also exposes a [[http://edx.readthedocs.org/projects/edx-platform-api/en/latest/course_structure/index.html][set of API]] to get all the courses that are being
  run on a platform. 
* Configure Open edX analytics for the courses 
** Setup edx-analytics
   1. Create a separate VM with at least 2GB of RAM and 30GB of HDD
      for setting up edX analytics
   2. Update and upgrade the VM
      #+BEGIN_EXAMPLE
      sudo apt-get update -y
      sudo apt-get upgrade -y
      #+END_EXAMPLE
   3. Create a separate virtual environment for the edx analytics setup.
      #+BEGIN_EXAMPLE
      # create an "ansible" virtualenv and activate it
      virtualenv ansible
      . ansible/bin/activate
      #+END_EXAMPLE
   4. Do the following steps
      #+BEGIN_EXAMPLE
      git clone https://github.com/edx/configuration.git

      cd configuration/
    
      pip install -r requirements.txt
    
      cd playbooks/edx-east/
      sudo ansible-playbook -i localhost, -c local analytics_single.yml --extra-vars "INSIGHTS_LMS_BASE=<LMS_HOSTNAME> INSIGHTS_BASE_URL=<INSIGHTS_HOSTNAME>
      # (If your site uses https, change the scheme and set the oauth flag to true. Enforce_secure means "insist on https".)
    
    
      # wait for a while :)
      #+END_EXAMPLE
   5. Run the following commands to see hadoop job. This job has
      built-in "compute pi"
      #+BEGIN_EXAMPLE
      sudo su - hadoop
  
      cd /edx/app/hadoop
 
      hadoop jar hadoop-2.3.0/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.3.0.jar pi 2 100
      # it should compute something -- I got pi = 3.12. Close enough :)
      #+END_EXAMPLE
   6. Also make sure you can run hive
      #+BEGIN_EXAMPLE
      /edx/app/hadoop/hive/bin/hive
      # it should work
      ^D to get back to your regular user
      #+END_EXAMPLE
   7. Get some test logs into HDFS
      
      #+BEGIN_EXAMPLE
      # scp tracking.log onto the machine from the LMS. Then...
      sudo mkdir -p /edx/var/log/tracking # if directory not exists.
      sudo scp root@<LMS-IP>:/edx/var/log/tracking/tracking.log /edx/var/log/tracking
      sudo chown hadoop /edx/var/log/tracking/tracking.log
      # wait a minute -- ansible creates a cron job to load files in that dir every minute
    
      # Check it  
      hdfs dfs -ls /data
    
      Found 1 items
      -rw-r--r--   1 hadoop supergroup     308814 2015-10-15 14:31 /data/tracking.log
      #+END_EXAMPLE
   8. Setup PIPELINE 
      #+BEGIN_SRC command
      ssh-keygen -t rsa -f ~/.ssh/id_rsa -P ''
      echo >> ~/.ssh/authorized_keys # Make sure there's a newline at the end
      cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
      # check: ssh localhost "echo It worked!" -- make sure it works.
  
      # Make a new virtualenv -- otherwise will have conflicts
      virtualenv pipeline
      . pipeline/bin/activate
  
  
      git clone https://github.com/edx/edx-analytics-pipeline
      cd edx-analytics-pipeline
  
      make bootstrap
    
      #+END_SRC
   9. Check the pipeline install by running a simple job to count
      events per day.

      *NOTE* : You may have to change the user name in the following
      command according to your system user accounts. 

      For example, If you want to run the command from root user (ssh
      access should be enabled for this access) then provide *--user
      root*
      #+BEGIN_SRC command
      # Ensure you're in the pipeline virtualenv 
      remote-task --host localhost --repo https://github.com/edx/edx-analytics-pipeline --user ubuntu --override-config $HOME/edx-analytics-pipeline/config/devstack.cfg --wheel-url http://edx-wheelhouse.s3-website-us-east-1.amazonaws.com/Ubuntu/precise --remote-name analyticstack --wait TotalEventsDailyTask --interval 2015 --output-root hdfs://localhost:9000/output/ --local-scheduler
      #+END_SRC
   10. Update the following file so that insights will be connected to
       LMS edxapp database.
       #+BEGIN_SRC command
       sudo vim /edx/etc/edx-analytics-pipeline/input.json
       # put in the right url and credentials for your LMS database
       #+END_SRC
       - Test it by running the following command. The output of the
	 below command shows the mysql queries. 
	 #+BEGIN_SRC command
	 remote-task --host localhost --user ubuntu --remote-name analyticstack --skip-setup --wait ImportEnrollmentsIntoMysql --interval 2015 --local-scheduler
	 #+END_SRC

   11. Create OAUTH2 client_id and secret from Django administartion
       page of LMS machine
       - *How to create OAUTH2 client_id and secret key:*
	 By default, edx-platform is not providing/creating default
	 user and password for signing in. So we need to create a
	 superuser so that we can access the django admin page using
	 those credentials. 
	
	 Create super user by issuing following commands on the LMS
	 machine.
	 #+BEGIN_SRC command  
	 sudo -u www-data /edx/bin/python.edxapp ./manage.py lms --settings aws create_user -s -p edx -e user@example.com
	 sudo -u www-data /edx/bin/python.edxapp ./manage.py lms --settings aws changepassword user
	 sudo -u www-data /edx/bin/python.edxapp ./manage.py lms --settings aws shell

	 from django.contrib.auth.models import User
	 me = User.objects.get(username="user")
	 me.is_superuser = True
	 me.is_staff = True
	 me.save()
	 #+END_SRC
       - Do the following steps
	 + Log in to Django admin page
	 + Find the Oauth2 table/app in the admin page
	 + Add client 
	 + Find the Oauth2_provider table/app
	 + Add created client to Trusted clients
   12. On insights VM, you will now need to update three settings: Open
       the file =/edx/etc/insights.yml= and update the following
       variables with appropriate values (that are generated
       automatically on django admin page on LMS machine).
       #+BEGIN_SRC command
       SOCIAL_AUTH_EDX_OIDC_KEY: '<PREFILLED VALUE 1 from LMS>'
       SOCIAL_AUTH_EDX_OIDC_SECRET: '<PREFILLED VALUE 2 FROM LMS>'
       SOCIAL_AUTH_EDX_OIDC_URL_ROOT: '<LMS URL>/oauth2'
       #+END_SRC

   13. References
       - https://openedx.atlassian.net/wiki/display/OpenOPS/edX+Analytics+Installation
       - https://openedx.atlassian.net/wiki/pages/viewpage.action?spaceKey=AN&title=Configuring+Insights+for+Open+ID+Connect+SSO+with+LMS
   
** Test LMS and Insights for analytics
    - *Page Not Found* :: 
      + Log into LMS as a staff@example.com 
      + Select any course
      + Navigate to course analytics button/link (Click on instructor
        button)
      + Redirects to LMS machine to see the analytics.
      + Page not found  
* Configuration changes suggested and made by Dr. Ramesh

** Problems identified in current Analytics configuration
*** OAuth trust issues between Insights and LMS 
We were unable to build a trust between Client application(Analaytics) and
Resource Server(LMS).The ideal process which should happen is given below -


**** Process 
+ Client -> Insights/Analytics machine -> Client application   
+ Server -> LMS/CMS machine -> Resource Server

+ When a client applications wants access to the resources of a resource owner,
  hosted on a resource server, the client application must first obtain an
  authorization grant.
+ Before a client application can request access to resources on a resource
  server, the client application must first register with the authorization
  server associated with the resource server.
+ The registration is typically a one-time task. Once registered, the
  registration remains valid, unless the client app registration is revoked.
+ At registration the client application is assigned a client ID and a client
  secret (password) by the authorization server.
+ The client ID and secret is unique to the client application on that
  authorization server.
+ If a client application registers with multiple authorization servers
  (e.g. both Facebook, Twitter and Google), each authorization server will
  issue its own unique client ID to the client application.
+ Whenever the client application requests access to resources stored on that
  same resource server, the client application needs to authenticate itself by
  sending along the client ID and the client secret to the autorhization
  server.
+ Whenever the client application requests access to resources stored on that
  same resource server, the client application needs to authenticate itself by
  sending along the client ID and the client secret to the autorhization
  server.

*** SSL certificate issues
+ We were using https protocol without using SSL certificates configured in web
server of LMS and Analytics machine. A SSL certificate issued by Certification
Authority(CA) is required to urgently required to get someone approve your
claim of who you are .
+ We were using Self-Signed certificates, which can be okay on local machines
  within the network, but not in global internet.
+ [[https://www.sslshopper.com/what-is-ssl.html][Understand SSL here]]

*** Client machine(Analytics) was not verifying the SSL certificate  
Insights machine was itself not verifying the SSL certificate from CA
authority. As a result we were getting the following error in /edx/var/log/insights/edx.log
#+BEGIN_SRC error
 File "/edx/app/insights/venvs/insights/local/lib/python2.7/site-packages/social/backends/oauth.py", line 383, in auth_complete
    method=self.ACCESS_TOKEN_METHOD
  File "/edx/app/insights/venvs/insights/local/lib/python2.7/site-packages/social/backends/open_id.py", line 360, in request_access_token
    response = self.get_json(*args, **kwargs)
  File "/edx/app/insights/venvs/insights/local/lib/python2.7/site-packages/social/backends/base.py", line 229, in get_json
    return self.request(url, *args, **kwargs).json()
  File "/edx/app/insights/venvs/insights/local/lib/python2.7/site-packages/social/backends/base.py", line 224, in request
    raise AuthFailed(self, str(err))
AuthFailed: Authentication failed: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590)
#+END_SRC
When tried with curl command, we obtained following error 
#+BEGIN_SRC error
curl https://lms.vlabs.ac.in
curl: (51) SSL: certificate verification failed (result: 5)
#+END_SRC


*** Any change in .py files of should the be followed by compilation of files 
We were changing some python files and identified that applied changes were not
coming into effect. As a result it was identified that, changes to be applied
will only come in effect after compilation of .py to.pyc files.

** Solutions to address above mentioned problems 
+ Replace IP address with domain names :: 
  Public IP address was issued a domain name. 
+ Make changes in lms.env.json file in LMS server ::
  + Login into LMS server
  + Open file lms.env.json
  #+BEGIN_SRC command
  a. vim /edx/app/edxapp/lms.env.json
  #+END_SRC
  + Search and Replace 
  #+BEGIN_SRC command
  "ANALYTICS_DASHBOARD_URL":"https://your-insights.domain.com:18110"
  "ANALYTICS_SERVER_URL": "https://your-insights.domain.com:18110"
  "ENABLE_OAUTH2": true,
  "ENABLE_OAUTH2_PROVIDER": true
  "JWT_ISSUER": "https://your-lms.domain.com/oauth2"
  "OAUTH_ENFORCE_SECURE": true,
  "ENABLE_OAUTH2": true,
  "OAUTH_OIDC_ISSUER": "https://your-lms.domain.com/oauth2"
  #+END_SRC
  + Save file and restart edx services 
  #+BEGIN_SRC command
  sudo /edx/bin/supervisorctl restart all 
  #+END_SRC 
+ Make changes in cms.env.json file in LMS server :: 
  + Login into LMS server
  + Open file cms.env.json
  #+BEGIN_SRC command
  a. vim /edx/app/edxapp/cms.env.json
  #+END_SRC
  + Search and Replace 
  #+BEGIN_SRC command
  "ANALYTICS_DASHBOARD_URL":"https://your-insights.domain.com:18110"
  "ANALYTICS_SERVER_URL": ""
  "JWT_ISSUER": "https://your-lms.domain.com/oauth2"
  #+END_SRC
  + Save file and restart edx services 
  #+BEGIN_SRC command
  sudo /edx/bin/supervisorctl restart all 
  #+END_SRC
+ Install SSL certificte in LMS server, i.e. in ngnix :: 
   Follow the steps given below to add a SSL certificate in LMS machine 

   +. Login to your lms machine 
   +. Change directory 
   #+BEGIN_SRC command
   cd /etc/nginx/ssl/certs
   #+END_SRC
   +. Copy your .crt, .key, and .ca-bundle file in /etc/nginx/ssl/certs. Create directory *certs* if it does not exist.
   +. Change directory
   #+BEGIN_SRC command
   cd /etc/nginx/sites-enabled
   #+END_SRC
   +. Open file lms and make following changes in server block of file 
   #+BEGIN_SRC command
   a. vim lms
   b. server_name your-server-domain-name;
   c. ssl_certificate /path/to/your/crt/file/.crt;
   d. ssl_certificate_key /path/to/your/key/file/.key;
   #+END_SRC 
   +. Restart ngnix services 
   #+BEGIN_SRC command
   service ngnix restart 
   #+END_SRC
   +. Restart edx services 
   #+BEGIN_SRC command
   sudo /edx/bin/supervisorctl restart all
   #+END_SRC
+ Install SSL certificate in Analytics Server, i.e. in ngninx ::
   Follow the steps given below to add a SSL certificate in LMS machine 

   +. Login to your insights machine 
   +. Change directory 
   #+BEGIN_SRC command
   cd /etc/nginx/ssl/certs
   #+END_SRC
   +. Copy your .crt, .key, and .ca-bundle file in /etc/nginx/ssl/certs. Create directory *certs* if it does not exist.
   +. Change directory
   #+BEGIN_SRC command
   cd /etc/nginx/sites-enabled
   #+END_SRC
   +. Open file insigts and make following changes in server block of file 
   #+BEGIN_SRC command
   a. vim insights
   b. server_name your-server-domain-name;
   c. ssl_certificate /path/to/your/crt/file/.crt;
   d. ssl_certificate_key /path/to/your/key/file/.key;
   #+END_SRC 
   +. Restart ngnix services 
   #+BEGIN_SRC command
   service ngnix restart 
   #+END_SRC
   + Restart services of edx
   #+BEGIN_SRC command
   sudo /edx/bin/supervisorctl restart all
   #+END_SRC
+ Add certificates in Insights machine ::
  Follow the steps given below to add CA certificate in Insights machine.
  + Install ca-certificate package in ubuntu. Ignore if already installed 
  #+BEGIN_SRC command
  apt-get install ca-certifcate
  #+END_SRC
  + Change directory to /usr/share/ca-certificates/
  #+BEGIN_SRC command
  cd /usr/share/ca-certificates/
  #+END_SRC 
  + Make a directory with name extra in /usr/share/ca-certificates/
  #+BEGIN_SRC command 
  mkdir extra
  #+END_SRC
  + Change directory to /usr/share/ca-certificates/extra
  #+BEGIN_SRC command
  cd /usr/share/ca-certificates/extra
  #+END_SRC
  + Copy your .crt and .ca-bundle files in current directory 
  + Fire command to reconfigure ca-certificates
  #+BEGIN_SRC command
  sudo dpkg-reconfigure ca-certificates
  #+END_SRC
  + A GUI will appear. At the top, a certificate will be listed in the form
    extra/your-crt-file.crt.
  + Press <SPACE BAR> to select the certificate and Press <ENTER> 
  + Fire command to update ca-certificates
  #+BEGIN_SRC command
  sudo update-ca-certificates
  #+END_SRC
  + Install package certifi==2015.04.28. We are no sure , whether this package
    is required in functioning or not. 
  #+BEGIN_SRC command
  sudo pip install certifi==2015.04.28
  #+END_SRC
  + Restart insights services 
  #+BEGIN_SRC command
  sudo /edx/bin/supervisorctl restart all 
  #+END_SRC
+ Edit open_id.py file in insights machines ::
  Follow the steps to edit the open_id.py file in insights machine
 
  + Login into Insights machine
  + Fire command locate to find the path of open_id.py file
  #+BEGIN_SRC command
  insights # locate open_id.py
  /edx/app/insights/venvs/insights/lib/python2.7/site-packages/social/backends/open_id.py
  /edx/app/insights/venvs/insights/lib/python2.7/site-packages/social/backends/open_id.pyc
  /edx/app/insights/venvs/insights/lib/python2.7/site-packages/social/tests/backends/open_id.py
  /edx/app/insights/venvs/insights/lib/python2.7/site-packages/social/tests/backends/open_id.pyc
  #+END_SRC
  + Open file
  #+BEGIN_SRC command
  vim /edx/app/insights/venvs/insights/lib/python2.7/site-packages/social/backends/open_id.py
  #+END_SRC
  + Search for string "issuer=self.ID_TOKEN_ISSUER". This string will fall in
    def validate_and_return_id_token of file.
  + In try block replace 
  #+BEGIN_SRC command
  id_token = jwt_decode(id_token, decryption_key, audience=client_id,
                                  issuer=self.ID_TOKEN_ISSUER,
                                  algorithms=['HS256'])

                       WITH

  id_token = jwt_decode(id_token, decryption_key, audience=client_id,
                                  issuer=self.ID_TOKEN_ISSUER, options = {'verify_iat' : False,},
                                  algorithms=['HS256'])

  #+END_SRC
  + Save file
  + Compile open_id.py files 
  #+BEGIN_SRC command
  insights # sudo python
  Python 2.7.10 (default, Jun 29 2015, 22:38:23) 
  [GCC 4.6.3] on linux2
  Type "help", "copyright", "credits" or "license" for more information.
  >>> import py_compile
  >>> py_compile.compile("open_id.py")
  >>> exit()
  #+END_SRC
  + Restart edx services
  #+BEGIN_SRC command
  sudo /edx/bin/supervisorctl restart all 
  #+END_SRC
+ Edit base.py file in insights machine ::

  + Login into Insights machine
  + Open file
  #+BEGIN_SRC command
  vim /edx/app/insights/venvs/insights/lib/python2.7/site-packages/social/backends/base.py
  #+END_SRC
  + In def request(self, url, method='GET', *args, **kwargs):, add the
    following line. This line says that please do not verify SSL.
  #+BEGIN_SRC command
  kwargs.setdefault('headers', {})
  if self.setting('VERIFY_SSL') is not None:
        kwargs.setdefault('verify', self.setting('VERIFY_SSL'))
  kwargs.setdefault('verify', False) #Added by Dr. Ramesh. Add this line as it is.
  kwargs.setdefault('timeout', self.setting('REQUESTS_TIMEOUT') or
                                     self.setting('URLOPEN_TIMEOUT'))
  #+END_SRC
  + In the same def in try block, replace as shown. This is to ignore
    SSL_PROTOCOL even if it is there.
  #+BEGIN_SRC command
  if self.SSL_PROTOCOL
        WITH
  if self.SSL_PROTOCOL is not None:
  #+END_SRC
  + In the same try block, add line in else section 
  #+BEGIN_SRC command
  else:
      response = request(method, url, *args, **kwargs) #Added by Dr. Ramesh
  #+END_SRC
  + Finally your def function looks like the one shown below. Please see the
    commented lines.
  #+BEGIN_SRC command
  def request(self, url, method='GET', *args, **kwargs):
        kwargs.setdefault('headers', {})
        if self.setting('VERIFY_SSL') is not None:
            kwargs.setdefault('verify', self.setting('VERIFY_SSL'))
        kwargs.setdefault('verify', False) #Added by Dr. Ramesh
        kwargs.setdefault('timeout', self.setting('REQUESTS_TIMEOUT') or
                                     self.setting('URLOPEN_TIMEOUT'))
        if self.SEND_USER_AGENT and 'User-Agent' not in kwargs['headers']:
            kwargs['headers']['User-Agent'] = user_agent()

        try:
            if self.SSL_PROTOCOL is not None: #Modified to not none
                #session = SSLHttpAdapter.ssl_adapter_session(self.SSL_PROTOCOL)
                #response = session.request(method, url, *args, **kwargs)
                response = request(method, url, *args, **kwargs)
            else:
                response = request(method, url, *args, **kwargs) #Added by Dr. Ramesh
        except ConnectionError as err:
            raise AuthFailed(self, str(err))
        response.raise_for_status()
        return response
  #+END_SRC
  + Save file and compile it.
 #+BEGIN_SRC command
  insights # sudo python
  Python 2.7.10 (default, Jun 29 2015, 22:38:23) 
  [GCC 4.6.3] on linux2
  Type "help", "copyright", "credits" or "license" for more information.
  >>> import py_compile
  >>> py_compile.compile("base.py")
  >>> exit()
  #+END_SRC
  + Restart edx services
  #+BEGIN_SRC command
  sudo /edx/bin/supervisorctl restart all 
  #+END_SRC
    
* References
  - https://github.com/edx/configuration/wiki
  - https://openedx.atlassian.net/wiki/display/OPEN/Debugging+Issues+with+LMS+and+Studio
  - https://github.com/edx/edx-analytics-pipeline/wiki
  - http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/analytics/install_analytics.html
  - https://github.com/open-craft/edx-analytics-devstack
      
* Acknowledgments 
We acknowledge the valuable support of Dr. Ramesh NPN from APSSDC to help us identify and
solve problems we were facing during setting up edx-analytics. We also thank
Mrs. Sukla Nag from IIT-B for her appropriate suggestions.
